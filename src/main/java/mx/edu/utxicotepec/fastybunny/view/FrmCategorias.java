/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.edu.utxicotepec.fastybunny.view;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import mx.edu.utxicotepec.fastybunny.controller.categoriasController;
import mx.edu.utxicotepec.fastybunny.model.categoriaModel;

/**
 * Formulario para la gestión de Categorías (CRUD).
 * Permite al usuario agregar, modificar, eliminar y consultar las categorías de productos.
 * @author PC-05
 */
public class FrmCategorias extends javax.swing.JInternalFrame {
    private DefaultTableModel modeloTabla;

    /**
     * Constructor del formulario FrmCategorias.
     */
    public FrmCategorias() {
        // Título de la ventana y propiedades del JInternalFrame.
        super("Categorías", true, false, false, true);
        // Se inicializa el modelo de la tabla con las columnas correctas.
        modeloTabla = new DefaultTableModel(new Object[]{"Id Categoria", "Nombre"}, 0);
        
        // Se inicializan los componentes gráficos generados por el diseñador.
        initComponents();
        
        // Se asigna el modelo a la tabla (debe hacerse después de initComponents).
        tblCategorias.setModel(modeloTabla);
        
        // Se cargan los datos iniciales en la tabla.
        cargarCategorias();
        
        // Se configura el listener para la selección de filas en la tabla.
        configurarListenerTabla();
    }
    
    /**
     * Configura un listener para detectar la selección de una fila en la tabla.
     * Cuando se selecciona una fila, los datos se cargan en el campo de texto.
     */
    private void configurarListenerTabla() {
        tblCategorias.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                // Se evita la doble notificación del evento.
                if (!event.getValueIsAdjusting() && tblCategorias.getSelectedRow() != -1) {
                    int filaSeleccionada = tblCategorias.getSelectedRow();
                    // Se obtiene el nombre de la categoría de la columna 1 y se muestra en el campo de texto.
                    txtNombre.setText(tblCategorias.getValueAt(filaSeleccionada, 1).toString());
                }
            }
        });
    }
    
    /**
     * Carga o recarga todas las categorías desde la base de datos y las muestra en la tabla.
     */
    private void cargarCategorias() {
        // Limpia el modelo de la tabla para evitar duplicados.
        modeloTabla.setRowCount(0);
        // Obtiene la lista de categorías desde el controlador.
        List<categoriaModel> categorias = categoriasController.obtenerTodas();
        // Itera sobre la lista y agrega cada categoría como una nueva fila en la tabla.
        for (categoriaModel categoria : categorias) {
            modeloTabla.addRow(new Object[]{categoria.getIdCategoria(), categoria.getNombreCategoria()});
        }
    }
    
    /**
     * Limpia el campo de texto y deselecciona cualquier fila en la tabla.
     */
    private void limpiarCampos() {
        txtNombre.setText("");
        tblCategorias.clearSelection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblUsuario = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategorias = new javax.swing.JTable();
        lblNombreRol = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        btnAgregar3 = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(91, 171, 185));

        lblUsuario.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        lblUsuario.setText("Categorias de Producto");

        txtNombre.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N

        tblCategorias.setBackground(new java.awt.Color(204, 255, 204));
        tblCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblCategorias);

        lblNombreRol.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblNombreRol.setText("Nombre de Categoria:");

        jPanel5.setBackground(new java.awt.Color(153, 153, 255));

        btnAgregar3.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnAgregar3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Agregar.png"))); // NOI18N
        btnAgregar3.setText("Nuevo");
        btnAgregar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregar3ActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icono2.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icono1.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icono3.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Imagen3.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAgregar3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btnModificar)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar)
                    .addComponent(btnBuscar)
                    .addComponent(btnModificar))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(lblUsuario))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(lblNombreRol)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblUsuario)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombreRol))
                .addGap(61, 61, 61)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción del botón "Nuevo".
     * Limpia los campos del formulario para una nueva entrada.
     * @param evt Evento de acción.
     */
    private void btnAgregar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregar3ActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnAgregar3ActionPerformed

    /**
     * Acción del botón "Guardar".
     * Inserta una nueva categoría con el nombre proporcionado en el campo de texto.
     * @param evt Evento de acción.
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        String nombre = txtNombre.getText();
        // Validación para asegurar que el nombre no esté vacío.
        if (nombre.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre de la categoría no puede estar vacío.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        categoriaModel categoria = new categoriaModel(nombre);
        if (categoriasController.insertarCategoria(categoria)) {
            JOptionPane.showMessageDialog(this, "Categoría guardada exitosamente.");
            cargarCategorias(); // Recarga la tabla para mostrar la nueva categoría.
            limpiarCampos();   // Limpia el formulario.
        } else {
            JOptionPane.showMessageDialog(this, "Error al guardar la categoría.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * Acción del botón "Buscar".
     * (Funcionalidad pendiente de implementación en el controlador).
     * @param evt Evento de acción.
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // Lógica de búsqueda (requiere un método en el controlador, por ejemplo, buscarPorNombre).
        String busqueda = JOptionPane.showInputDialog(this, "Ingrese el nombre de la categoría a buscar:");
        if (busqueda != null && !busqueda.trim().isEmpty()) {
            // Aquí iría la llamada al método del controlador y la actualización de la tabla.
            // Ejemplo: List<categoriaModel> resultados = categoriasController.buscarPorNombre(busqueda);
            // y luego actualizar la tabla con los resultados.
            JOptionPane.showMessageDialog(this, "Funcionalidad de búsqueda no implementada aún.");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Acción del botón "Modificar".
     * Actualiza el nombre de la categoría seleccionada.
     * @param evt Evento de acción.
     */
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        int filaSeleccionada = tblCategorias.getSelectedRow();
        
        // Verifica si se ha seleccionado una fila.
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una categoría para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String nombre = txtNombre.getText();
        // Validación para asegurar que el nuevo nombre no esté vacío.
        if (nombre.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre de la categoría no puede estar vacío.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int idCategoria = (int) tblCategorias.getValueAt(filaSeleccionada, 0);
        categoriaModel categoria = new categoriaModel(idCategoria, nombre);
        
        if (categoriasController.actualizarCategoria(categoria)) {
            JOptionPane.showMessageDialog(this, "Categoría modificada exitosamente.");
            cargarCategorias(); // Recarga la tabla.
            limpiarCampos();   // Limpia el formulario.
        } else {
            JOptionPane.showMessageDialog(this, "Error al modificar la categoría.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * Acción del botón "Eliminar".
     * Elimina la categoría seleccionada en la tabla.
     * @param evt Evento de acción.
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = tblCategorias.getSelectedRow();
        
        // Verifica si se ha seleccionado una fila.
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una categoría para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Pide confirmación al usuario antes de eliminar.
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar esta categoría?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            int idCategoria = (int) tblCategorias.getValueAt(filaSeleccionada, 0);
            if (categoriasController.eliminarCategoria(idCategoria)) {
                JOptionPane.showMessageDialog(this, "Categoría eliminada exitosamente.");
                cargarCategorias(); // Recarga la tabla.
                limpiarCampos();   // Limpia el formulario.
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar la categoría.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar3;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNombreRol;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTable tblCategorias;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
