/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.edu.utxicotepec.fastybunny.view;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import mx.edu.utxicotepec.fastybunny.controller.categoriasController;
import mx.edu.utxicotepec.fastybunny.controller.productoController;
import mx.edu.utxicotepec.fastybunny.controller.usuarioController;
import mx.edu.utxicotepec.fastybunny.model.categoriaModel;
import mx.edu.utxicotepec.fastybunny.model.productoModel;
import mx.edu.utxicotepec.fastybunny.model.usuarioModel;

/**
 * Formulario para la gestión de Productos (CRUD).
 * Permite agregar, modificar, eliminar y consultar productos en el sistema.
 * @author PC-04
 */
public class FrmProductos extends javax.swing.JInternalFrame {
    private DefaultTableModel modeloTabla;
    private int idProducto = 0; // Almacena el ID del producto seleccionado en la tabla

    /**
     * Constructor del formulario FrmProductos.
     * Se encarga de inicializar los componentes, configurar la tabla y cargar los datos iniciales.
     */
    public FrmProductos() {
        super("Productos", true, false, false, true);
        
        // CORRECCIÓN CRÍTICA: initComponents() debe ser llamado ANTES de manipular cualquier componente.
        initComponents();

        // Se inicializa el modelo de la tabla y se asigna al JTable existente.
        modeloTabla = new DefaultTableModel(new Object[]{"ID", "Nombre", "Descripción", "Precio", "ID Vendedor", "ID Categoría"}, 0);
        tblProductos.setModel(modeloTabla);

        // Carga los datos iniciales en la tabla y los ComboBoxes.
        cargarProductos();
        cargarVendedores();
        cargarCategorias();
        
        // Se añade el listener para la selección de filas en la tabla.
        configurarListenerTabla();
        
        // Se asegura que los botones de modificar y eliminar estén desactivados al inicio.
        actualizarEstadoBotones(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        lblNombreRol = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblNombreRol1 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        lblNombreRol2 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        lblNombreRol9 = new javax.swing.JLabel();
        cboVendedor = new javax.swing.JComboBox<usuarioModel>();
        lblUsuario = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        cboCategoria = new javax.swing.JComboBox<categoriaModel>();
        lblNombreRol10 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(91, 171, 185));

        tblProductos.setBackground(new java.awt.Color(0, 204, 204));
        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblProductos);

        lblNombreRol.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblNombreRol.setText("Nombre:");

        txtNombre.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N

        lblNombreRol1.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblNombreRol1.setText("Descripcion:");

        txtDescripcion.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N

        lblNombreRol2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblNombreRol2.setText("Precio:");

        txtPrecio.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N

        lblNombreRol9.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblNombreRol9.setText("Vendedor");

        cboVendedor.setPreferredSize(new java.awt.Dimension(65, 25));

        lblUsuario.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        lblUsuario.setText("Productos");

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));

        btnAgregar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Agregar.png"))); // NOI18N
        btnAgregar.setText("Nuevo");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnGuardar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icono2.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnBuscar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icono1.png"))); // NOI18N
        btnBuscar.setText("Refrescar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnModificar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icono3.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Imagen3.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnModificar)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnModificar))
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        cboCategoria.setPreferredSize(new java.awt.Dimension(65, 25));

        lblNombreRol10.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblNombreRol10.setText("Categoria");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(lblUsuario)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblNombreRol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblNombreRol9)
                            .addComponent(lblNombreRol2)
                            .addComponent(lblNombreRol10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblNombreRol1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(lblUsuario)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombreRol))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombreRol1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombreRol2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombreRol9)
                            .addComponent(cboVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombreRol10)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 75, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción del botón "Nuevo". Limpia los campos del formulario para un nuevo registro.
     */
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnAgregarActionPerformed

    /**
     * Acción del botón "Guardar". Inserta un nuevo producto en la base de datos.
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        insertarProducto();
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * Acción del botón "Refrescar". Vuelve a cargar todos los productos desde la base de datos.
     */
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        cargarProductos();
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * Acción del botón "Modificar". Actualiza el producto seleccionado en la base de datos.
     */
    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        modificarProducto();
    }//GEN-LAST:event_btnModificarActionPerformed

    /**
     * Acción del botón "Eliminar". Elimina el producto seleccionado de la base de datos.
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarProducto();
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmProductos().setVisible(true);
            }
        });
    }
    
    // --- MÉTODOS DE LÓGICA ---

    /**
     * Carga o recarga la lista de productos desde la base de datos y la muestra en la tabla.
     */
    private void cargarProductos() {
        modeloTabla.setRowCount(0); // Limpia la tabla antes de cargar nuevos datos
        List<productoModel> productos = productoController.obtenerTodos();

        for (productoModel p : productos) {
            modeloTabla.addRow(new Object[]{
                p.getIdProducto(),
                p.getNombreProducto(),
                p.getDescripcion(),
                p.getPrecio(),
                p.getIdVendedor(),
                p.getIdCategoria()
            });
        }
    }

    /**
     * Inserta un nuevo producto en la base de datos con los datos del formulario.
     */
    private void insertarProducto() {
        // Validación de campos
        if (!validarCampos()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Recolección de datos del formulario
            String nombre = txtNombre.getText().trim();
            String descripcion = txtDescripcion.getText().trim();
            double precio = Double.parseDouble(txtPrecio.getText().trim());
            
            usuarioModel vendedorSeleccionado = (usuarioModel) cboVendedor.getSelectedItem();
            categoriaModel categoriaSeleccionada = (categoriaModel) cboCategoria.getSelectedItem();

            if (vendedorSeleccionado == null || categoriaSeleccionada == null) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un vendedor y una categoría.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int idVendedor = vendedorSeleccionado.getIdUsuario();
            int idCategoria = categoriaSeleccionada.getIdCategoria();

            // Creación del modelo y llamada al controlador
            productoModel p = new productoModel(nombre, descripcion, precio, idVendedor, idCategoria);
            if (productoController.insertarProducto(p)) {
                JOptionPane.showMessageDialog(this, "Producto agregado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cargarProductos();
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Error al agregar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "El precio debe ser un número válido.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Modifica un producto existente en la base de datos.
     */
    private void modificarProducto() {
        if (idProducto == 0) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un producto de la tabla para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!validarCampos()) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String nombre = txtNombre.getText().trim();
            String descripcion = txtDescripcion.getText().trim();
            double precio = Double.parseDouble(txtPrecio.getText().trim());
            
            usuarioModel vendedorSeleccionado = (usuarioModel) cboVendedor.getSelectedItem();
            categoriaModel categoriaSeleccionada = (categoriaModel) cboCategoria.getSelectedItem();

            if (vendedorSeleccionado == null || categoriaSeleccionada == null) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un vendedor y una categoría.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int idVendedor = vendedorSeleccionado.getIdUsuario();
            int idCategoria = categoriaSeleccionada.getIdCategoria();

            productoModel p = new productoModel(nombre, descripcion, precio, idVendedor, idCategoria);
            p.setIdProducto(this.idProducto); // Se asigna el ID del producto a modificar

            if (productoController.actualizarProducto(p)) {
                JOptionPane.showMessageDialog(this, "Producto modificado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cargarProductos();
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Error al modificar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "El precio debe ser un número válido.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Elimina el producto seleccionado de la tabla.
     */
    private void eliminarProducto() {
        if (idProducto == 0) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un producto de la tabla para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int opcion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este producto?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (opcion == JOptionPane.YES_OPTION) {
            if (productoController.eliminarProducto(idProducto)) {
                JOptionPane.showMessageDialog(this, "Producto eliminado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cargarProductos();
                limpiarCampos();
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el producto.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // --- MÉTODOS AUXILIARES ---

    /**
     * Carga la lista de vendedores en el ComboBox correspondiente.
     */
    private void cargarVendedores() {
        cboVendedor.removeAllItems();
        List<usuarioModel> vendedores = usuarioController.obtenerVendedores();
        for (usuarioModel vendedor : vendedores) {
            cboVendedor.addItem(vendedor);
        }
    }

    /**
     * Carga la lista de categorías en el ComboBox correspondiente.
     */
    private void cargarCategorias() {
        cboCategoria.removeAllItems();
        List<categoriaModel> categorias = categoriasController.obtenerTodas();
        for (categoriaModel categoria : categorias) {
            cboCategoria.addItem(categoria);
        }
    }

    /**
     * Limpia todos los campos del formulario y restablece el estado inicial.
     */
    private void limpiarCampos() {
        txtNombre.setText("");
        txtDescripcion.setText("");
        txtPrecio.setText("");
        cboVendedor.setSelectedIndex(-1);
        cboCategoria.setSelectedIndex(-1);
        tblProductos.clearSelection();
        this.idProducto = 0;
        btnGuardar.setEnabled(true);
        actualizarEstadoBotones(false);
    }

    /**
     * Valida que los campos de texto no estén vacíos.
     * @return true si todos los campos son válidos, false en caso contrario.
     */
    private boolean validarCampos() {
        return !txtNombre.getText().trim().isEmpty() &&
               !txtDescripcion.getText().trim().isEmpty() &&
               !txtPrecio.getText().trim().isEmpty();
    }
    
    /**
     * Configura el listener para la tabla. Se activa cuando el usuario selecciona una fila.
     */
    private void configurarListenerTabla() {
        tblProductos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // El evento se dispara dos veces, con isAdjusting se asegura que solo se procese una vez.
                if (!e.getValueIsAdjusting() && tblProductos.getSelectedRow() != -1) {
                    int filaSeleccionada = tblProductos.getSelectedRow();
                    
                    // Obtener datos del modelo de la tabla
                    idProducto = (int) modeloTabla.getValueAt(filaSeleccionada, 0);
                    String nombre = modeloTabla.getValueAt(filaSeleccionada, 1).toString();
                    String descripcion = modeloTabla.getValueAt(filaSeleccionada, 2).toString();
                    String precio = modeloTabla.getValueAt(filaSeleccionada, 3).toString();
                    int idVendedor = (int) modeloTabla.getValueAt(filaSeleccionada, 4);
                    int idCategoria = (int) modeloTabla.getValueAt(filaSeleccionada, 5);

                    // Llenar los campos del formulario
                    txtNombre.setText(nombre);
                    txtDescripcion.setText(descripcion);
                    txtPrecio.setText(precio);
                    
                    // Seleccionar el item correcto en los ComboBox
                    seleccionarItemEnComboBox(cboVendedor, idVendedor);
                    seleccionarItemEnComboBox(cboCategoria, idCategoria);
                    
                    // Habilitar/deshabilitar botones
                    btnGuardar.setEnabled(false);
                    actualizarEstadoBotones(true);
                }
            }
        });
    }
    
    /**
     * Habilita o deshabilita los botones de Modificar y Eliminar.
     * @param habilitar true para habilitar, false para deshabilitar.
     */
    private void actualizarEstadoBotones(boolean habilitar) {
        btnModificar.setEnabled(habilitar);
        btnEliminar.setEnabled(habilitar);
    }
    
    /**
     * Método genérico para seleccionar un ítem en un JComboBox basado en un ID.
     * @param comboBox El JComboBox a modificar.
     * @param id El ID del objeto a seleccionar.
     */
    private void seleccionarItemEnComboBox(javax.swing.JComboBox comboBox, int id) {
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            Object item = comboBox.getItemAt(i);
            if (item instanceof usuarioModel && ((usuarioModel) item).getIdUsuario() == id) {
                comboBox.setSelectedIndex(i);
                return;
            }
            if (item instanceof categoriaModel && ((categoriaModel) item).getIdCategoria() == id) {
                comboBox.setSelectedIndex(i);
                return;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<categoriaModel> cboCategoria;
    private javax.swing.JComboBox<usuarioModel> cboVendedor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNombreRol;
    private javax.swing.JLabel lblNombreRol1;
    private javax.swing.JLabel lblNombreRol10;
    private javax.swing.JLabel lblNombreRol2;
    private javax.swing.JLabel lblNombreRol9;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
