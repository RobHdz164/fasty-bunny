/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.edu.utxicotepec.fastybunny.view;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import mx.edu.utxicotepec.fastybunny.controller.rolController;
import mx.edu.utxicotepec.fastybunny.controller.usuarioController;
import mx.edu.utxicotepec.fastybunny.model.rolModel;
import mx.edu.utxicotepec.fastybunny.model.usuarioModel;

/**
 *
 * @author PC-05
 */
public class FrmUsuarios extends javax.swing.JInternalFrame {
    // Modelo para la tabla de usuarios
    private final DefaultTableModel modeloTabla;
    // ID del usuario seleccionado para operaciones de modificación/eliminación
    private int idUsuario = 0;

    /**
     * Constructor del formulario FrmUsuarios.
     * Inicializa los componentes, configura el formulario y carga los datos iniciales.
     */
    public FrmUsuarios() {
        // Llama al constructor de JInternalFrame con título y propiedades de la ventana
        super("Usuarios", true, true, false, true);
        
        // Es CRÍTICO llamar a initComponents() ANTES de cualquier manipulación de componentes.
        initComponents();

        // Define el modelo de la tabla con las columnas correspondientes.
        // Se ha eliminado la contraseña de la vista por seguridad.
        modeloTabla = new DefaultTableModel(new Object[]{"ID", "Nombre", "Teléfono", "Correo", "Rol"}, 0);
        tblUsuarios.setModel(modeloTabla); // Aplica el modelo a la tabla

        // Carga los datos iniciales
        cargarRoles(); // Carga los roles en el ComboBox
        cargarUsuarios(); // Carga los usuarios en la tabla
        
        // Añade el listener para la selección de filas en la tabla
        agregarListenerTabla();
        
        // Configura el estado inicial de los botones
        habilitarBotones(true, false, false, false); // Nuevo:Sí, Guardar:No, Modificar:No, Eliminar:No
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsuarios = new javax.swing.JTable();
        lblNombre = new javax.swing.JLabel();
        lblContraseña = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        lblCorreo = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        txtContraseña = new javax.swing.JPasswordField();
        lblRol = new javax.swing.JLabel();
        cboRol = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();

        setClosable(true);
        setTitle("Gestión de Usuarios");

        jPanel1.setBackground(new java.awt.Color(91, 171, 185));

        lblTitulo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setText("Gestión de Usuarios");

        txtNombre.setBackground(new java.awt.Color(224, 247, 250));
        txtNombre.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N

        tblUsuarios.setBackground(new java.awt.Color(224, 247, 250));
        tblUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblUsuarios);

        lblNombre.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblNombre.setForeground(new java.awt.Color(255, 255, 255));
        lblNombre.setText("Nombre:");

        lblContraseña.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblContraseña.setForeground(new java.awt.Color(255, 255, 255));
        lblContraseña.setText("Contraseña:");

        lblTelefono.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblTelefono.setForeground(new java.awt.Color(255, 255, 255));
        lblTelefono.setText("Teléfono:");

        txtTelefono.setBackground(new java.awt.Color(224, 247, 250));
        txtTelefono.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N

        lblCorreo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblCorreo.setForeground(new java.awt.Color(255, 255, 255));
        lblCorreo.setText("Correo:");

        txtCorreo.setBackground(new java.awt.Color(224, 247, 250));
        txtCorreo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N

        txtContraseña.setBackground(new java.awt.Color(224, 247, 250));
        txtContraseña.setPreferredSize(new java.awt.Dimension(64, 25));

        lblRol.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        lblRol.setForeground(new java.awt.Color(255, 255, 255));
        lblRol.setText("Rol del Usuario:");

        cboRol.setBackground(new java.awt.Color(224, 247, 250));
        cboRol.setPreferredSize(new java.awt.Dimension(65, 25));

        jPanel2.setBackground(new java.awt.Color(77, 148, 158));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Acciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        btnNuevo.setBackground(new java.awt.Color(0, 102, 102));
        btnNuevo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnNuevo.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Agregar.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setBackground(new java.awt.Color(0, 102, 102));
        btnGuardar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/aceptar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(0, 102, 102));
        btnEliminar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Eliminar.png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setBackground(new java.awt.Color(0, 102, 102));
        btnModificar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icono2.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnModificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        txtBuscar.setBackground(new java.awt.Color(224, 247, 250));
        txtBuscar.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 14)); // NOI18N

        btnBuscar.setBackground(new java.awt.Color(0, 102, 102));
        btnBuscar.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Icono1.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTitulo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblCorreo)
                                    .addComponent(lblTelefono)
                                    .addComponent(lblContraseña)
                                    .addComponent(lblRol)
                                    .addComponent(lblNombre))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cboRol, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBuscar)))
                        .addGap(35, 35, 35))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTelefono)
                            .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCorreo)
                            .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContraseña)
                    .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRol))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarUsuario();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        insertarUsuario();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        buscarUsuario();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        modificarUsuario();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        limpiarCampos();
        habilitarBotones(true, true, false, false); // Nuevo:Sí, Guardar:Sí, Modificar:No, Eliminar:No
        tblUsuarios.clearSelection(); // Deselecciona cualquier fila en la tabla
        cargarUsuarios(); // Recarga todos los usuarios por si se estaba mostrando una búsqueda
    }//GEN-LAST:event_btnNuevoActionPerformed

    /**
     * Carga todos los usuarios desde la base de datos y los muestra en la tabla.
     */
    public void cargarUsuarios() {
        // Limpia la tabla antes de cargar nuevos datos
        modeloTabla.setRowCount(0);
        
        // Obtiene la lista de todos los usuarios desde el controlador
        List<usuarioModel> usuarios = usuarioController.obtenerTodos();
        
        // Itera sobre la lista de usuarios para agregarlos a la tabla
        for (usuarioModel u : usuarios) {
            // Obtiene el nombre del rol a partir de su ID
            rolModel rol = rolController.obtenerRolPorId(u.getIdRol());
            String nombreRol = (rol != null) ? rol.getNombre_rol() : "No asignado";

            // Agrega una nueva fila al modelo de la tabla
            modeloTabla.addRow(new Object[]{
                u.getIdUsuario(),
                u.getNombre(),
                u.getTelefono(),
                u.getCorreo(),
                nombreRol // Muestra el nombre del rol en lugar del ID
            });
        }
    }
    
    /**
     * Carga todos los roles disponibles en el ComboBox para la asignación de roles.
     */
    private void cargarRoles() {
        cboRol.removeAllItems(); // Limpia los items existentes
        List<rolModel> roles = rolController.obtenerTodos();
        for (rolModel rol : roles) {
            cboRol.addItem(rol); // Agrega el objeto rolModel completo
        }
    }

    /**
     * Inserta un nuevo usuario en la base de datos con los datos del formulario.
     */
    public void insertarUsuario() {
        // Validar que los campos no estén vacíos
        if (txtNombre.getText().trim().isEmpty() ||
            txtCorreo.getText().trim().isEmpty() ||
            String.valueOf(txtContraseña.getPassword()).trim().isEmpty() ||
            txtTelefono.getText().trim().isEmpty() ||
            cboRol.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Recolecta los datos del formulario
        String nombre = txtNombre.getText().trim();
        String correo = txtCorreo.getText().trim();
        String contraseña = String.valueOf(txtContraseña.getPassword());
        String telefono = txtTelefono.getText().trim();
        
        // Obtiene el rol seleccionado del ComboBox
        rolModel rolSeleccionado = (rolModel) cboRol.getSelectedItem();
        int idRol = rolSeleccionado.getId_rol();

        // Crea el objeto usuarioModel
        usuarioModel usuario = new usuarioModel(nombre, correo, contraseña, telefono, idRol);
        
        // Llama al controlador para insertar el usuario
        if (usuarioController.insertarUsuario(usuario)) {
            JOptionPane.showMessageDialog(this, "Usuario agregado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            cargarUsuarios(); // Recarga la tabla
            limpiarCampos(); // Limpia el formulario
            habilitarBotones(true, false, false, false); // Restablece los botones
        } else {
            JOptionPane.showMessageDialog(this, "Error al agregar el usuario.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Busca usuarios por nombre y actualiza la tabla con los resultados.
     */
    private void buscarUsuario() {
        String nombre = txtBuscar.getText().trim();
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un nombre para buscar.", "Campo Vacío", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        modeloTabla.setRowCount(0); // Limpia la tabla
        List<usuarioModel> usuarios = usuarioController.buscarUsuarioPorNombre(nombre);
        
        if (usuarios.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se encontraron usuarios con ese nombre.", "Sin Resultados", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (usuarioModel u : usuarios) {
                rolModel rol = rolController.obtenerRolPorId(u.getIdRol());
                String nombreRol = (rol != null) ? rol.getNombre_rol() : "No asignado";
                modeloTabla.addRow(new Object[]{
                    u.getIdUsuario(),
                    u.getNombre(),
                    u.getTelefono(),
                    u.getCorreo(),
                    nombreRol
                });
            }
        }
        limpiarCampos();
        habilitarBotones(true, false, false, false);
    }

    /**
     * Agrega un listener a la tabla para detectar la selección de una fila.
     * Cuando se selecciona una fila, los datos del usuario se cargan en el formulario.
     */
    private void agregarListenerTabla() {
        tblUsuarios.getSelectionModel().addListSelectionListener(e -> {
            // El evento se dispara dos veces, el "if" evita la doble ejecución
            if (!e.getValueIsAdjusting() && tblUsuarios.getSelectedRow() != -1) {
                int filaSeleccionada = tblUsuarios.getSelectedRow();
                
                // Obtiene el ID del usuario de la primera columna (columna 0)
                idUsuario = (int) modeloTabla.getValueAt(filaSeleccionada, 0);
                
                // Rellena los campos del formulario con los datos de la fila seleccionada
                txtNombre.setText(modeloTabla.getValueAt(filaSeleccionada, 1).toString());
                txtTelefono.setText(modeloTabla.getValueAt(filaSeleccionada, 2).toString());
                txtCorreo.setText(modeloTabla.getValueAt(filaSeleccionada, 3).toString());
                
                // La contraseña no se carga por seguridad, se deja en blanco.
                txtContraseña.setText("");

                // Selecciona el rol correspondiente en el ComboBox
                String nombreRol = modeloTabla.getValueAt(filaSeleccionada, 4).toString();
                for (int i = 0; i < cboRol.getItemCount(); i++) {
                    if (cboRol.getItemAt(i).toString().equals(nombreRol)) {
                        cboRol.setSelectedIndex(i);
                        break;
                    }
                }
                
                // Habilita los botones para modificar y eliminar
                habilitarBotones(true, false, true, true);
            }
        });
    }

    /**
     * Elimina el usuario seleccionado en la tabla.
     */
    private void eliminarUsuario() {
        if (idUsuario == 0) {
            JOptionPane.showMessageDialog(this, "Seleccione un usuario de la tabla para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar este usuario?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);
        
        if (confirmacion == JOptionPane.YES_OPTION) {
            if (usuarioController.eliminarUsuario(idUsuario)) {
                JOptionPane.showMessageDialog(this, "Usuario eliminado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cargarUsuarios();
                limpiarCampos();
                habilitarBotones(true, false, false, false);
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el usuario.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Modifica los datos del usuario seleccionado con la información del formulario.
     */
    private void modificarUsuario() {
        if (idUsuario == 0) {
            JOptionPane.showMessageDialog(this, "Seleccione un usuario de la tabla para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Validar que los campos no estén vacíos
        if (txtNombre.getText().trim().isEmpty() ||
            txtCorreo.getText().trim().isEmpty() ||
            txtTelefono.getText().trim().isEmpty() ||
            cboRol.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Los campos nombre, correo, teléfono y rol son obligatorios.", "Error de Validación", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        String nombre = txtNombre.getText().trim();
        String correo = txtCorreo.getText().trim();
        String contraseña = String.valueOf(txtContraseña.getPassword());
        String telefono = txtTelefono.getText().trim();
        rolModel rolSeleccionado = (rolModel) cboRol.getSelectedItem();
        int idRol = rolSeleccionado.getId_rol();
        
        // Si el campo de contraseña está vacío, no se actualiza.
        // El controlador debe estar preparado para manejar una contraseña vacía o nula.
        usuarioModel usuario = new usuarioModel(nombre, correo, contraseña, telefono, idRol);
        usuario.setIdUsuario(idUsuario);

        if (usuarioController.modificarUsuario(usuario)) {
            JOptionPane.showMessageDialog(this, "Usuario modificado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            cargarUsuarios();
            limpiarCampos();
            habilitarBotones(true, false, false, false);
        } else {
            JOptionPane.showMessageDialog(this, "Error al modificar el usuario.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Limpia todos los campos de entrada del formulario y restablece las variables de estado.
     */
    private void limpiarCampos() {
        txtNombre.setText("");
        txtCorreo.setText("");
        txtContraseña.setText("");
        txtTelefono.setText("");
        txtBuscar.setText("");
        cboRol.setSelectedIndex(-1); // Deselecciona cualquier rol
        idUsuario = 0; // Resetea el ID del usuario seleccionado
        tblUsuarios.clearSelection(); // Deselecciona la fila en la tabla
        habilitarBotones(true, false, false, false);
    }
    
    /**
     * Controla el estado (activado/desactivado) de los botones de acción.
     * @param nuevo Habilita o deshabilita el botón "Nuevo".
     * @param guardar Habilita o deshabilita el botón "Guardar".
     * @param modificar Habilita o deshabilita el botón "Modificar".
     * @param eliminar Habilita o deshabilita el botón "Eliminar".
     */
    private void habilitarBotones(boolean nuevo, boolean guardar, boolean modificar, boolean eliminar) {
        btnNuevo.setEnabled(nuevo);
        btnGuardar.setEnabled(guardar);
        btnModificar.setEnabled(modificar);
        btnEliminar.setEnabled(eliminar);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<rolModel> cboRol;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContraseña;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblRol;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tblUsuarios;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JPasswordField txtContraseña;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
